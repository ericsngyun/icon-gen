import { type NextPage } from "next";
import Head from "next/head";

import { api } from "@/utils/api";
import { Card, CardHeader, CardDescription, CardContent, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form } from "@/components/ui/form";
// import { zodResolver } from "@hookform/resolvers,zod";
import { ModeToggle } from "@/components/theme-toggle";

import * as z from "zod";
import { FormGroup } from "@/components/FormGroup";
import React, { useState } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"


// const formSchema = z.object({
//     prompt: z.string(),
// });

const GeneratePage: NextPage = () => {
  const [form, setForm] = useState({
    prompt: "",
  });

  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data) {
      console.log('mutation finishes', data)
    }
  });

  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();
    // console.log(form);
    // TODO: submit the form data to the backend
      // no backend endpoint to send data to at the moment
    
      generateIcon.mutate({
        prompt: form.prompt,
      })

      // 
  }

  function updateForm(key: string) {
    return function (e: React.ChangeEvent<HTMLInputElement>) {
      setForm({
        ...form,
        [key]: e.target.value,
      });
      console.log(form);
    }
  }

  const session = useSession();
  // !! sets to boolean if the data is set from session object
  const isLoggedIn = !!session.data;
  console.log(session.data);

  return (
    <>
      <Head>
        <title>Icon Generator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        {/* <ModeToggle /> */}
        <div className = "flex gap-4"> 
          <Avatar>
            <AvatarImage src = {session?.data?.user?.image} />
            { isLoggedIn && ( <AvatarFallback>{session?.data?.user?.name}</AvatarFallback> )}
          </Avatar>
          { !isLoggedIn && (
            <Button variant = "ghost" onClick = {
              () => {signIn().catch(console.error);
              }}> LOG IN </Button>
          )}

          { isLoggedIn && (
            <Button variant = "destructive" onClick = {
              () => {signOut().catch(console.error);
              }}>Log Out</Button>
          )}
          {/* { session?.data?.user?.name } */}
          {/* { session?.data?.user?.image } */}
        </div>
        <Card className = "p-6 lg:min-w-[500px]">
          <form
            className = "flex flex-col gap-4"
            onSubmit = {handleFormSubmit}>
            <FormGroup>
              <label className = "font-bold text-xl">Prompt</label>
              <Input 
                type = "text" 
                className = "max-w-xl italic" 
                value = {form.prompt} 
                onChange = {updateForm("prompt")}>
              </Input>
            </FormGroup>
            <CardFooter className = "flex justify-end -p-4">
              <Button variant = "default">
                Submit
              </Button>
            </CardFooter>
          </form>
        </Card>
      </main>
    </>
  );
};

export default GeneratePage;

